package br.com.recargapay.digitalwallet.service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.recargapay.digitalwallet.dto.WalletRequestDTO;
import br.com.recargapay.digitalwallet.entities.Transaction;
import br.com.recargapay.digitalwallet.entities.Wallet;
import br.com.recargapay.digitalwallet.enums.TransactionType;
import br.com.recargapay.digitalwallet.repository.TransactionRepository;
import br.com.recargapay.digitalwallet.repository.WalletRepository;

@Service
public class WalletService {
	@Autowired
	private WalletRepository walletRepository;

	@Autowired
	private TransactionRepository transactionRepository;

	public Wallet createWallet(WalletRequestDTO request) {

		// Verificar se o usuário já possui uma carteira

		if (walletRepository.existsByOwner(request.getOwner())) {
			throw new IllegalArgumentException("Wallet already exists for this user.");
		}

		// Criar nova carteira
		Wallet wallet = new Wallet();
		wallet.setOwner(request.getOwner());
		wallet.setBalance(BigDecimal.ZERO);

		// Salvar no banco de dados
		return walletRepository.save(wallet);
	}

	// Método para recuperar o saldo da carteira pelo ID
	public Wallet getWalletBalance(Long walletId) {
		return walletRepository.findById(walletId)
				.orElseThrow(() -> new IllegalArgumentException("Wallet not found with ID: " + walletId));
	}

	// Método para recuperar o historico
	public BigDecimal getHistoricalBalance(Long walletId, LocalDate date, LocalTime time) {
		// Buscar carteira
		Wallet wallet = walletRepository.findById(walletId)
				.orElseThrow(() -> new IllegalArgumentException("Wallet not found with ID: " + walletId));

		// Usar hora padrão (23:59:59) caso hora não seja fornecida
		LocalTime targetTime = (time != null) ? time : LocalTime.of(23, 59, 59);
		;

		// Calcular saldo diretamente no banco
		return transactionRepository.calculateBalanceUpTo(wallet, date, targetTime);
	}

	// Método para depositar fundos
	public Wallet depositFunds(Long walletId, BigDecimal amount, String requestId) {
		
		// Validação: o valor do depósito deve ser maior que zero
		if (amount == null || amount.compareTo(BigDecimal.ZERO) <= 0) {
			throw new IllegalArgumentException("Deposit amount must be greater than zero.");
		}
		
		// Verificar se a transação com o requestId já foi processada
	    if (transactionRepository.existsByRequestId(requestId)) {
	        throw new IllegalArgumentException("This deposit has already been processed.");
	    }

		// Buscar a carteira
		Wallet wallet = walletRepository.findById(walletId)
				.orElseThrow(() -> new IllegalArgumentException("Wallet not found with ID: " + walletId));

		// Atualizar o saldo da carteira
		wallet.setBalance(wallet.getBalance().add(amount));
		walletRepository.save(wallet);

		// Registrar a transação
		Transaction transaction = new Transaction();
		transaction.setWallet(wallet);
		transaction.setType(TransactionType.DEPOSIT);
		transaction.setAmount(amount);
		transaction.setDate(LocalDate.now());
		transaction.setTime(LocalTime.now());

		transactionRepository.save(transaction);

		return wallet;
	}

	// Método para retirar fundos
	public Wallet withdrawFunds(Long walletId, BigDecimal amount) {
		// Validação: o valor da retirada deve ser maior que zero
		if (amount == null || amount.compareTo(BigDecimal.ZERO) <= 0) {
			throw new IllegalArgumentException("Withdrawal amount must be greater than zero.");
		}

		// Buscar a carteira
		Wallet wallet = walletRepository.findById(walletId)
				.orElseThrow(() -> new IllegalArgumentException("Wallet not found with ID: " + walletId));

		// Verificar se há saldo suficiente
		if (wallet.getBalance().compareTo(amount) < 0) {
			throw new IllegalArgumentException("Insufficient balance.");
		}

		// Atualizar o saldo da carteira
		wallet.setBalance(wallet.getBalance().subtract(amount));
		walletRepository.save(wallet);

		// Registrar a transação
		Transaction transaction = new Transaction();
		transaction.setWallet(wallet);
		transaction.setType(TransactionType.WITHDRAW);
		transaction.setAmount(amount);
		transaction.setDate(LocalDate.now());
		transaction.setTime(LocalTime.now());

		transactionRepository.save(transaction);

		return wallet;
	}
	
	// Método para transferir fundos entre carteiras
    public void transferFunds(Long sourceWalletId, Long targetWalletId, BigDecimal amount) {
        // Validação: valor da transferência deve ser maior que zero
        if (amount == null || amount.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Transfer amount must be greater than zero.");
        }

        // Buscar carteiras de origem e destino
        Wallet sourceWallet = walletRepository.findById(sourceWalletId)
                .orElseThrow(() -> new IllegalArgumentException("Source wallet not found with ID: " + sourceWalletId));

        Wallet targetWallet = walletRepository.findById(targetWalletId)
                .orElseThrow(() -> new IllegalArgumentException("Target wallet not found with ID: " + targetWalletId));

        // Verificar se há saldo suficiente na carteira de origem
        if (sourceWallet.getBalance().compareTo(amount) < 0) {
            throw new IllegalArgumentException("Insufficient balance in source wallet.");
        }

        // Atualizar saldo das carteiras
        sourceWallet.setBalance(sourceWallet.getBalance().subtract(amount));
        targetWallet.setBalance(targetWallet.getBalance().add(amount));

        walletRepository.save(sourceWallet);
        walletRepository.save(targetWallet);

        // Registrar transação de débito na carteira de origem
        Transaction debitTransaction = new Transaction();
        debitTransaction.setWallet(sourceWallet);
        debitTransaction.setType(TransactionType.WITHDRAW);
        debitTransaction.setAmount(amount);
        debitTransaction.setDate(LocalDate.now());
        debitTransaction.setTime(LocalTime.now());
        transactionRepository.save(debitTransaction);

        // Registrar transação de crédito na carteira de destino
        Transaction creditTransaction = new Transaction();
        creditTransaction.setWallet(targetWallet);
        creditTransaction.setType(TransactionType.DEPOSIT);
        creditTransaction.setAmount(amount);
        creditTransaction.setDate(LocalDate.now());
        creditTransaction.setTime(LocalTime.now());
        transactionRepository.save(creditTransaction);
    }

}
