package br.com.recargapay.digitalwallet.service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.recargapay.digitalwallet.dto.WalletRequestDTO;
import br.com.recargapay.digitalwallet.entities.Transaction;
import br.com.recargapay.digitalwallet.entities.Wallet;
import br.com.recargapay.digitalwallet.enums.TransactionType;
import br.com.recargapay.digitalwallet.repository.TransactionRepository;
import br.com.recargapay.digitalwallet.repository.WalletRepository;

@Service
public class WalletService {
	@Autowired
	private WalletRepository walletRepository;

	@Autowired
	private TransactionRepository transactionRepository;

	@Autowired
	private TransactionService transactionService;

	public Wallet createWallet(WalletRequestDTO request) {

		// Verificar se o usuário já possui uma carteira

		if (walletRepository.existsByOwner(request.getOwner())) {
			throw new IllegalArgumentException("Wallet already exists for this user.");
		}

		// Criar nova carteira
		Wallet wallet = new Wallet();
		wallet.setOwner(request.getOwner());
		wallet.setBalance(BigDecimal.ZERO);

		// Salvar no banco de dados
		return walletRepository.save(wallet);
	}

	// Método para recuperar o saldo da carteira pelo ID
	public Wallet getWalletBalance(Long walletId) {
		return walletRepository.findById(walletId)
				.orElseThrow(() -> new IllegalArgumentException("Wallet not found with ID: " + walletId));
	}
	
	public BigDecimal getHistoricalBalance(Long walletId, LocalDate date, LocalTime time) {
        // Buscar carteira
        Wallet wallet = walletRepository.findById(walletId)
                .orElseThrow(() -> new IllegalArgumentException("Wallet not found with ID: " + walletId));

        // Usar hora padrão (23:59:59) caso hora não seja fornecida
        LocalTime targetTime = (time != null) ? time : LocalTime.MAX;

        // Calcular saldo diretamente no banco
        return transactionRepository.calculateBalanceUpTo(wallet, date, targetTime);
    }	
	
	

}
