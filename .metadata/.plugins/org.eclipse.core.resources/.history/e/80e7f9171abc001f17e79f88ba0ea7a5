package br.com.recargapay.digitalwallet.controller;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import br.com.recargapay.digitalwallet.dto.WalletRequestDTO;
import br.com.recargapay.digitalwallet.entities.Wallet;
import br.com.recargapay.digitalwallet.service.WalletService;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/wallets")
public class WalletController {
	@Autowired
    private WalletService walletService;

    @PostMapping
    public ResponseEntity<Wallet> createWallet(@Valid @RequestBody WalletRequestDTO request) {
        Wallet wallet = walletService.createWallet(request);
        return ResponseEntity.status(HttpStatus.CREATED).body(wallet);
    }
    
    // Endpoint para recuperar o saldo da carteira
    @GetMapping("/{id}/balance")
    public ResponseEntity<?> getWalletBalance(@PathVariable Long id) {
        try {
            Wallet wallet = walletService.getWalletBalance(id);
            return ResponseEntity.ok().body("Saldo atual: " + wallet.getBalance());
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }
    
    
    
    @GetMapping("/{id}/balance/history")
    public ResponseEntity<?> getHistoricalBalance(
            @PathVariable Long id,
            @RequestParam String date,
            @RequestParam(required = false) String time) {
        try {
            LocalDate parsedDate = LocalDate.parse(date);
            LocalTime parsedTime = time != null ? LocalTime.parse(time) : LocalTime.MAX; // Hora padr√£o como 23:59:59

            BigDecimal balance = walletService.getHistoricalBalance(id, parsedDate, parsedTime);
            return ResponseEntity.ok().body("Saldo em " + parsedDate + " " + parsedTime + ": " + balance);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Erro: " + e.getMessage());
        }
    }
}
